{"version":3,"sources":["components/NavBar.js","components/MonthTitle.js","components/MonthCell.js","constants/daysOfWeek.js","lib/monthInfo.js","constants/months.js","components/MonthGrid.js","components/Month.js","App.js","serviceWorker.js","reducers/events/eventsReducer.js","reducers/events/eventsConstants.js","reducers/rootReducer.js","reducers/store.js","index.js"],"names":["NavBar","react_default","a","createElement","react_router_dom","to","MonthTitle","_ref","month","year","MonthCell","date","empty","className","daysByIndex","NUM_DAYS","_NUM_DAYS","Object","defineProperty","monthInfo","numDays","isLeapYear","getNumDays","firstDay","Date","concat","lastDay","startsOn","getDay","endsOn","renderWeek","week","datesInWeek","_result","info","result","indexOf","forEach","day","getDatesInWeek","key","map","components_MonthCell","renderGrid","numWeeks","_monthInfo2","console","log","daysInFirstWeek","Math","ceil","weeksInMonth","_","range","MonthGrid","propTypes","PropTypes","string","Month","components_MonthTitle","components_MonthGrid","App","components_NavBar","react_router","exact","path","render","match","components_Month","params","Boolean","window","location","hostname","initialState","events","eventsReducer","state","arguments","length","undefined","action","type","objectSpread","event","id","keys","reduce","newEvents","eventId","update","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b521b2a8.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n  <nav>\n    <Link to=\"/\">Home</Link>\n    <Link to=\"/month/June/2019\">Monthly View</Link>\n    <Link to=\"/week\">Weekly View</Link>\n  </nav>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MonthTitle = ({\n  month,\n  year,\n}) => (\n  <h2>{month} {year}</h2>\n);\n\nMonthTitle.propTypes = {\n  month: PropTypes.string,\n  year: PropTypes.string,\n};\n\nexport default MonthTitle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MonthCell = ({\n  date,\n  month,\n  year,\n  empty,\n}) => (\n  empty ?\n    <div /> :\n    (\n      <div className=\"month-cell\">\n        {date}\n      </div>\n    )\n);\n\nMonthCell.propTypes = {\n  date: PropTypes.number,\n  month: PropTypes.string,\n  year: PropTypes.string,\n  empty: PropTypes.bool,\n};\n\nexport default MonthCell;\n","export const Monday = 'Monday';\nexport const Tuesday = 'Tuesday';\nexport const Wednesday = 'Wednesday';\nexport const Thursday = 'Thursday';\nexport const Friday = 'Friday';\nexport const Saturday = 'Saturday';\nexport const Sunday = 'Sunday';\n\nexport const daysByIndex = [\n  Sunday,\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n];\n","import {\n  January,\n  February,\n  March,\n  April,\n  May,\n  June,\n  July,\n  August,\n  September,\n  October,\n  November,\n  December,\n} from '../constants/months';\n\nimport {\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n  Sunday,\n  daysByIndex,\n} from '../constants/daysOfWeek';\n\nconst NUM_DAYS = {\n  [January]: 31,\n  [March]: 31,\n  [April]: 30,\n  [May]: 31,\n  [June]: 30,\n  [July]: 31,\n  [August]: 31,\n  [September]: 30,\n  [October]: 31,\n  [November]: 30,\n  [December]: 31,\n};\n\nconst isLeapYear = year => year % 4 === 0 && (\n  year % 100 !== 0 || year % 400 === 0\n);\n\nconst getNumDays = (month, year) => {\n  if (month === February) {\n    if (isLeapYear(year)) {\n      return 29;\n    }\n    return 28;\n  }\n  return NUM_DAYS[month];\n};\n\nconst monthInfo = (month, year) => {\n  const numDays = getNumDays(month, year);\n  const firstDay = new Date(`${month} 1, ${year}`);\n  const lastDay = new Date(`${month} ${numDays}, ${year}`);\n  const startsOn = daysByIndex[firstDay.getDay()];\n  const endsOn = daysByIndex[lastDay.getDay()];\n  return {\n    month,\n    year,\n    numDays,\n    startsOn,\n    endsOn,\n  };\n};\n\nexport default monthInfo;\n","export const January = 'January';\nexport const February = 'February';\nexport const March = 'March';\nexport const April = 'April';\nexport const May = 'May';\nexport const June = 'June';\nexport const July = 'July';\nexport const August = 'August';\nexport const September = 'September';\nexport const October = 'October';\nexport const November = 'November';\nexport const December = 'December';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport MonthCell from './MonthCell';\nimport monthInfo from '../lib/monthInfo';\nimport {\n  Monday,\n  Tuesday,\n  Wednesday,\n  Thursday,\n  Friday,\n  Saturday,\n  Sunday,\n  daysByIndex,\n} from '../constants/daysOfWeek';\n\nconst getDatesInWeek = (month, year, week) => {\n  const info = monthInfo(month, year);\n  const result = {\n    [Sunday]: -1,\n    [Monday]: -1,\n    [Tuesday]: -1,\n    [Wednesday]: -1,\n    [Thursday]: -1,\n    [Friday]: -1,\n    [Saturday]: -1,\n  };\n\n  const dateOfFirstSunday = 1 - daysByIndex.indexOf(info.startsOn);\n  let date = dateOfFirstSunday + 7 * week;\n  daysByIndex.forEach(day => {\n    result[day] = date;\n    date += 1;\n  });\n\n  return result;\n};\n\nconst renderWeek = (month, year, week) => {\n  const datesInWeek = getDatesInWeek(month, year, week);\n  const { numDays } = monthInfo(month, year);\n  return (\n    <tr key={`${month}-${week}`}>\n      {daysByIndex.map(day => (\n        <td key={`${day}-${week}`}>\n          <MonthCell\n            date={datesInWeek[day]}\n            month={month}\n            year={year}\n            empty={datesInWeek[day] < 1 || datesInWeek[day] > numDays}\n          />\n        </td>\n      ))\n      }\n    </tr>\n  );\n};\n\nconst weeksInMonth = (month, year) => {\n  const { numDays, startsOn } = monthInfo(month, year);\n  console.log(startsOn);\n  const daysInFirstWeek = 7 - daysByIndex.indexOf(startsOn);\n  return Math.ceil((numDays - daysInFirstWeek) / 7) + 1;\n};\n\nconst renderGrid = (month, year) => {\n  const numWeeks = weeksInMonth(month, year);\n  return _.range(0, numWeeks).map(week => renderWeek(month, year, week));\n};\n\nconst MonthGrid = ({\n  month,\n  year,\n}) => (\n  <div className=\"month-grid-container\">\n    <table className=\"month-grid\">\n      <thead>\n        <th>Sunday</th>\n        <th>Monday</th>\n        <th>Tuesday</th>\n        <th>Wednesday</th>\n        <th>Thursday</th>\n        <th>Friday</th>\n        <th>Saturday</th>\n      </thead>\n      <tbody>\n        {renderGrid(month, year)}\n      </tbody>\n    </table>\n  </div>\n);\n\nMonthGrid.propTypes = {\n  month: PropTypes.string,\n  year: PropTypes.string,\n};\n\nexport default MonthGrid;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MonthTitle from './MonthTitle';\nimport MonthGrid from './MonthGrid';\n\nconst Month = ({\n  month,\n  year,\n}) => (\n  <div className=\"month-container\">\n    <MonthTitle month={month} year={year} />\n    <MonthGrid month={month} year={year} />\n  </div>\n);\n\nMonthGrid.propTypes = {\n  month: PropTypes.string,\n  year: PropTypes.string,\n};\n\nexport default Month;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport NavBar from './components/NavBar';\nimport Month from './components/Month';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <Switch>\n        <Route exact path=\"/\" render={() => <div>Home</div>} />\n        <Route\n          path=\"/month/:month/:year\"\n          render={({match}) => (\n            <Month {...match.params} />\n          )}\n        />\n        <Route path=\"/week\" render={() => <div>Weekly view</div>} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { ADD_EVENT, REMOVE_EVENT, UPDATE_EVENT } from './eventsConstants';\n\nconst initialState = {\n  events: {},\n};\n\nconst eventsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_EVENT:\n      return {\n        ...state,\n        events: {\n          ...state.events,\n          [action.event.id]: action.event,\n        },\n      };\n    case REMOVE_EVENT:\n      return {\n        ...state,\n        events: Object.keys(state.events).reduce((newEvents, id) => (id === action.eventId ?\n          newEvents :\n          {\n            ...newEvents,\n            [id]: state.events[id],\n          })),\n      };\n    case UPDATE_EVENT:\n      return {\n        ...state,\n        events: {\n          ...state.events,\n          [action.eventId]: {\n            ...state.events[action.eventId],\n            ...action.update,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport default eventsReducer;\n","export const ADD_EVENT = 'ADD_EVENT';\nexport const REMOVE_EVENT = 'REMOVE_EVENT';\nexport const UPDATE_EVENT = 'UPDATE_EVENT';\n","import { combineReducers } from 'redux';\n\nimport eventsReducer from './events/eventsReducer';\n\nconst rootReducer = combineReducers({\n  events: eventsReducer,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './rootReducer';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancers(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './reducers/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}